filter(description %in% c(
'engagement',
'account_created',
'product_pageview_from_site',
'basket',
'checkout',
'transaction')) %>%
group_by(user_id, variation_id, description) %>%
summarise(count = n()) %>%
group_by() %>%
spread(description, count)
users
users
d
time_to_signup = d %>%
select(user_id, description, time) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(user_id, description) %>%
filter(time = first(time))
time_to_signup = d %>%
select(user_id, description, time) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(user_id, description) %>%
filter(first(time))
time_to_signup = d %>%
select(user_id, description, time) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(user_id, description) %>%
filter(first(time))
time_to_signup = d %>%
select(user_id, description, time) %>%
filter(description %in% c('engagement', 'account_created'))
?first
time_to_signup = d %>%
select(user_id, description, time) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(user_id, description) %>%
filter(time = first(time))
time_to_signup = d %>%
select(user_id, description, time) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(user_id, description) %>%
filter(time = min(time))
time_to_signup = d %>%
select(user_id, description, time) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(user_id, description) %>%
time_to_signup = d %>%
select(user_id, description, time) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(user_id, description)
time_to_signup
time_to_signup %>% summarise(t = min(time))
time_to_signup %>% summarise(t = min(time))
time_to_signup = d %>%
select(user_id, description, time) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(user_id, description) %>%
summarise(time = min(time)) %>%
arrange(time) %>%
mutate(time_to_signup = lag(time)-time)
time_to_signup
signups = d %>%
filter(description == 'account_created')
select(user_id)
signups = d %>%
filter(description == 'account_created') %>%
select(user_id)
time_to_signup = d %>%
filter(user_id %in% signups$user_id)
select(user_id, description, time) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(user_id, description) %>%
summarise(time = min(time)) %>%
arrange(time) %>%
mutate(time_to_signup = lead(time)-time)
time_to_signup = d %>%
filter(user_id %in% signups$user_id) %>%
select(user_id, description, time) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(user_id, description) %>%
summarise(time = min(time)) %>%
arrange(time) %>%
mutate(time_to_signup = lead(time)-time)
time_to_signup
time_to_signup = d %>%
filter(user_id %in% signups$user_id) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(variation, user_id, description) %>%
summarise(time = min(time)) %>%
arrange(time) %>%
mutate(time_to_signup = lead(time)-time) %>%
group_by() %>%
filter(!(is.na(time_to_signup))) %>%
select(variation, engagement = time, time_to_signup)
time_to_signup = d %>%
filter(user_id %in% signups$user_id) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(variation, user_id, description) %>%
summarise(time = min(time)) %>%
arrange(time) %>%
mutate(time_to_signup = lead(time)-time) %>%
group_by() %>%
filter(!(is.na(time_to_signup))) %>%
select(variation, time, time_to_signup)
time_to_signup = d %>%
filter(user_id %in% signups$user_id) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(variation, user_id, description) %>%
summarise(time = min(time)) %>%
arrange(time) %>%
mutate(time_to_signup = lead(time)-time) %>%
group_by()
time_to_signup = d %>%
filter(user_id %in% signups$user_id)
time_to_signup = d %>%
filter(user_id %in% signups$user_id) %>%
filter(description %in% c('engagement', 'account_created'))
time_to_signup = d %>%
filter(user_id %in% signups$user_id) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(variation, user_id, description)
time_to_signup
time_to_signup = d %>%
filter(user_id %in% signups$user_id) %>%
filter(description %in% c('engagement', 'account_created')) %>%
group_by(variation_id, user_id, description) %>%
summarise(time = min(time)) %>%
arrange(time) %>%
mutate(time_to_signup = lead(time)-time) %>%
group_by() %>%
filter(!(is.na(time_to_signup))) %>%
select(variation_id, time, time_to_signup)
time_to_signup
time_to_signup %>% group_by(variation_id) %>% arrange(time_to_signup)
time_to_signup %>% glimpse
time_to_signup %>% filter(variation_id == 2625010285)
time_to_signup %>% filter(variation_id == 2625010285) %>% summarise
time_to_signup %>% filter(variation_id == 2625010285) %>% summary
time_to_signup %>% filter(variation_id == 2625010285) %>% mutate(t = hours(time_to_signup))
time_to_signup %>% filter(variation_id == 2625010285) %>% mutate(t = as.numeric(time_to_signup, units="days"))
time_to_signup %>% filter(variation_id == 2625010285) %>% mutate(t = floor(as.numeric(time_to_signup, units="days")))
time_to_signup %>% filter(variation_id == 2625010285) %>% mutate(t = floor(as.numeric(time_to_signup, units="days"))) %>% summary
time_to_signup %>% filter(variation_id == 2625010285) %>% mutate(t = floor(as.numeric(time_to_signup, units="days"))) %>% summary
time_to_signup %>% filter(variation_id != 2625010285) %>% mutate(t = floor(as.numeric(time_to_signup, units="days"))) %>% summary
install.packages('knitr')
install.packages('kernlab')
library(spam)
spam
??spam
data(spam)
data(spam)
data('spam')
install.packages('datasets')
install.packages("datasets")
install.packages("datasets")
library(kernlab)
data(spam)
spam
head(spam)
str(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4] + 1))
hCluster = hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) -1
trainSpam$numType
as.numeric(trainSpam$type)
costFunction = function(x, y) sum(x != (y>0.5))
cvError  = rep(NA, 55)
library(boot)
for(i in 1:55) { }
for(i in 1:55) {
?reformulate
library(aod)
install.packages(c('aod', 'ggplot2'))
library(aod)
library(ggplot2)
mydata <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
head(mydata)
summary(mydata)
sapply(mydata, sd)
?xtabs
xtabs(~admit + rank, data = mydata)
mydata$rank = factor(mydata$rank)
mylogit = glm(admit ~ gre + gpa + rank, data = mydata, family = 'binomial')
mylogit
summary(mylogit)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp[1]
temp[1,]
temp[1,]*temp-2,
temp[1,]*temp[2,]
sum(temp[1,]*temp[2,])
0.75*3
0.75*0.3
0.7*(1-0.52)
.225+.336
.225+.561
install.packages('UsingR')
library(UsingR)
library(ggplot2)
library(UsingR)
data(galton)
library(reshape2)
galton
head(galton)
reshape2::melt(galton)
long = melt(galton)
g = ggplot(long, aes(x = value, fill = variable))
g = g + geom_histogram(colour = 'black', binwidth=1)
g = g + facet_grid(. ~ variable)
g
library(manipulate)
myHist = function(mu) {
mse = mean((galton$child - mu)^2)
g =
ggplot(
galton,
aes(x = child)
) +
geom_histogram(
fill = 'salmon',
colour = 'black',
binwidth = 1
) +
geom_vline(
xintercept = mu,
size = 3
) +
ggtitle(
paste0('mu = ', mu, ', MSE = ', round(mse, 2))
)
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
mu = 3
g =
ggplot(
galton,
aes(x = child)
) +
geom_histogram(
fill = 'salmon',
colour = 'black',
binwidth = 1
) +
geom_vline(
xintercept = mu,
size = 3
) +
ggtitle(
paste0('mu = ', mu, ', MSE = ', round(mse, 2))
)
mse = mean((galton$child - mu)^2)
g =
ggplot(
galton,
aes(x = child)
) +
geom_histogram(
fill = 'salmon',
colour = 'black',
binwidth = 1
) +
geom_vline(
xintercept = mu,
size = 3
) +
ggtitle(
paste0('mu = ', mu, ', MSE = ', round(mse, 2))
)
g
rm(mu)
rm(mse)
myHist = function(mu) {
mse = mean((galton$child - mu)^2)
g =
ggplot(
galton,
aes(x = child)
) +
geom_histogram(
fill = 'salmon',
colour = 'black',
binwidth = 1
) +
geom_vline(
xintercept = mu,
size = 3
) +
ggtitle(
paste0('mu = ', mu, ', MSE = ', round(mse, 2))
)
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
data(father.son)
father
father.son
head(father.son)
library(UsingR)
data(father.son)
y = (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
x = (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
rho = cor(x, y)
myPlot = function(x, y) {
plot(x, y,
xlab = "Father's height, normalised",
ylab = "Son's height, normalised",
xlim = c(-3, 3), ylim = c(-3, 3),
bg = "lightbue", col = "black", cex = 1.1, pch = 21,
frame = F)
}
myPlot(x, y)
myPlot = function(x, y) {
plot(x, y,
xlab = "Father's height, normalised",
ylab = "Son's height, normalised",
xlim = c(-3, 3), ylim = c(-3, 3),
bg = "lightblue", col = "black", cex = 1.1, pch = 21,
frame = F)
}
myPlot(x, y)
abline(0, 1)
abline(0, 1/rho, lwd = 2)
abline(0, rho, lwd = 2)
abline(h = 0)
abline(v = 0)
y <- galton$child
x <- galton$parent
beta1 <- cor(y, x) *  sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
beta1 <- cor(y, x) *  sd(x) / sd(y)
beta0 <- mean(x) - beta1 * mean(y)
rbind(c(beta0, beta1), coef(lm(x ~ y)))
ggplot(galton, aes(x = parent, y = child)) + geom_point()
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
y
freqData
library(dplyr)
install.packages('dplyr')
library(dplyr)
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
?I
clear()
clear
clean
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x, w)
mean(x)
mean(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(y - mean(y)) ~ I(x - mean(x)))
lm(I(y - mean(y)) ~ I(x - mean(x))) -1
lm(I(y - mean(y)) ~ I(x - mean(x))) - 1
lm(I(y - mean(y)) ~ I(x - mean(x)) - 1)
lm(I(y - mean(y)) ~ I(x - mean(x)))
lm(I(y - mean(y)) ~ I(x - mean(x)) - 1)
data("mtcars")
lm(mpg ~ weight, data = mtcars)
mtcars
lm(mpg ~ wt, data = mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
rm(list = ls())
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x1 = (x - mean(x)) / sd(x)
x1
rm(x)
rm(x1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x1 = x - mean(x)
y1 = y - mean(y)
x1
lm(y1  ~ x1)
myPlot<-function(beta){
y<-galton$child-mean(galton$child)
x<-galton$parent-mean(galton$parent)
freqData<-as.data.frame(table(x,y))
names(freqData)<-c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=.15*freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse<-mean((y-beta*x)^2)
title(paste("beta=",beta,"mse=",round(mse,3)))
}
manipulate(myPlot(beta),beta=slider(0.6,1.2,step=0.02))
myPlot<-function(beta){
y<-galton$child
x<-galton$parent
freqData<-as.data.frame(table(x,y))
names(freqData)<-c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=.15*freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse<-mean((y-beta*x)^2)
title(paste("beta=",beta,"mse=",round(mse,3)))
}
manipulate(myPlot(beta),beta=slider(0.6,1.2,step=0.02))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
xm = mean(x)
ym = mean(y)
ym / xm
xm / ym
lm(y ~ x)
slope = cor(x, y) * sd(y) / sd(x)
slope
lm(y ~ 0 + x)
install.packages('knitr')
install.packages('knitr')
install.packages(c('lubridate', 'dplyr', 'tidyr', 'ggplot2', 'lattice'))
setwd("~/GitHub/RepData_PeerAssessment1")
library(knitr)
knit2html('PA1_template.Rmd')
install.packages('devtools')
install.packages('swirl')
library(swirl)
swirl()
install_from_swirl('Statistical Inference')
swirl()
1-(3/36)
deck
1/52
52
1/13
0
3/13
2/51
1.6*.8/2
1.6*.8/2
mypdf()
mypdf
integrate(mypdf, 0, 1.6)
0.5
sqrt(0.5*4)
0.997*0.001
(1-0.985)*(1-0.001)
(0.997*0.001)/((0.997*0.001) + (1-0.985)*(1-0.001))
